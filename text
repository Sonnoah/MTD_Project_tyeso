// import { NextResponse } from "next/server";
// import { prisma } from "@/lib/prisma";
// import { hash } from "bcrypt";
// import * as z from 'zod'

// const userSchema = z
//   .object({
//     username: z.string().min(1, "Username is required").max(100),
//     email: z.string().min(1, "Email is required").email("Invalid email"),
//     password: z
//       .string()
//       .min(1, "Password is required")
//       .min(3, "Password must have than 3 characters"),
//     confirmPassword: z.string().min(1, "Password confirmation is required"),
//   })

// export async function POST(req: Request) {
//   try {
//     const body = await req.json();
//     const { email, username, password } = userSchema.parse(body);

//     // check if email already exists
//     const existingUserByEmail = await prisma.user.findUnique({
//       where: { email: email },
//     });
//     if (existingUserByEmail) {
//       return NextResponse.json(
//         { user: null, massage: "User with this email already exists" },
//         { status: 409 }
//       );
//     }

//     // check if username already exists
//     const existingUserByUsername = await prisma.user.findUnique({
//       where: { username: username },
//     });
//     if (existingUserByUsername) {
//       return NextResponse.json(
//         { user: null, massage: "User with this username already exists" },
//         { status: 409 }
//       );
//     }

//     const hashedPassword = await hash(password, 10);
//     const newUser = await prisma.user.create({
//       data: {
//         username,
//         email,
//         password: hashedPassword,
//       },
//     });

//     const { password: newUserPassword, ...rest } = newUser;

//     return NextResponse.json(
//       { user: rest, message: "User created successfully" },
//       { status: 201 }
//     );
//   } catch (error) {
//     return NextResponse.json(
//       { message: "Something went wrong!" },
//       { status: 201 }
//     );
//   }
// }





// <form onSubmit={form.handleSubmit(onSubmit)} className="w-full">
// <div className="justify-center m-10 max-w-2xl mx-auto ">
//   <div className="w-200px p-6 bg-Black rounded-md shadow-md border border-primary-content ">
//     <h1 className="text-3xl mb-10 font-semibold text-center text-success ">
//       Register
//     </h1>

//     {/* username */}

//     <label className="input input-bordered flex items-center gap-5 m-5">
//       <svg
//         xmlns="http://www.w3.org/2000/svg"
//         fill="none"
//         viewBox="0 0 24 24"
//         strokeWidth={1.5}
//         stroke="currentColor"
//         className="w-6 h-6"
//       >
//         <path
//           strokeLinecap="round"
//           strokeLinejoin="round"
//           d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z"
//         />
//       </svg>
//       <input className="grow" placeholder="Username" />
//     </label>

//     {/* Email */}
//     <label className="input input-bordered flex items-center gap-5 m-5">
//       <svg
//         xmlns="http://www.w3.org/2000/svg"
//         fill="none"
//         viewBox="0 0 24 24"
//         strokeWidth={1.5}
//         stroke="currentColor"
//         className="w-6 h-6"
//       >
//         <path
//           strokeLinecap="round"
//           strokeLinejoin="round"
//           d="M21.75 6.75v10.5a2.25 2.25 0 0 1-2.25 2.25h-15a2.25 2.25 0 0 1-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25m19.5 0v.243a2.25 2.25 0 0 1-1.07 1.916l-7.5 4.615a2.25 2.25 0 0 1-2.36 0L3.32 8.91a2.25 2.25 0 0 1-1.07-1.916V6.75"
//         />
//       </svg>
//       <input aria-errormessage="" className="grow" placeholder="email" />
//     </label>

//     {/* Password */}
//     <label className="input input-bordered flex items-center gap-5 m-5">
//       <svg
//         xmlns="http://www.w3.org/2000/svg"
//         fill="none"
//         viewBox="0 0 24 24"
//         strokeWidth={1.5}
//         stroke="currentColor"
//         className="w-6 h-6"
//       >
//         <path
//           strokeLinecap="round"
//           strokeLinejoin="round"
//           d="M15.75 5.25a3 3 0 0 1 3 3m3 0a6 6 0 0 1-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1 1 21.75 8.25Z"
//         />
//       </svg>
//       <input type="Password" className="grow" placeholder="Password" />
//     </label>

//     <label className="input input-bordered flex items-center gap-5 m-5">
//       <svg
//         xmlns="http://www.w3.org/2000/svg"
//         fill="none"
//         viewBox="0 0 24 24"
//         strokeWidth={1.5}
//         stroke="currentColor"
//         className="w-6 h-6"
//       >
//         <path
//           strokeLinecap="round"
//           strokeLinejoin="round"
//           d="M15.75 5.25a3 3 0 0 1 3 3m3 0a6 6 0 0 1-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1 1 21.75 8.25Z"
//         />
//       </svg>
//       <input
//         type="Password"
//         className="grow"
//         placeholder="Confirm Password"
//       />
//     </label>

//     <div className="flex justify-center">
//       <button className="btn btn-outline btn-success items-center gap-5 m-5 w-full max-w-xs">
//         Submit
//       </button>
//     </div>
//   </div>
// </div>
// </form>